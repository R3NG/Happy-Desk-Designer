# -*- coding: utf-8 -*-
"""
Created on Tue Nov  5 21:35:49 2024

@author: kirst
"""

## Set up environment
import pygame
import pyaudio
import sys

# initialize pygame
pygame.init()

# Set up display
size = (1000,800)
screen = pygame.display.set_mode(size)
pygame.display.set_caption("Happy Desk Designer")

#Hopefully makes a quit button?
#button_rect = pygame.Rect(300, 250 200 50) #button property (x,y), width, height
#pygame.draw.rect(screen, >INSERT COLOUR<, button_rect)
#text_surface = font.render(button_text, True, WHITE)
#text_rect = text_surface.get_rect(center=button_rect.center)
#screen.blit(text_surface, text_rect)
#screen.blit('quit?', 990, 790)

'''
if event.type == pygame.MOUSEBUTTONDOWN:
    if button_rect.collidepoint(event.pos):  # Check if button was clicked
      pygame.quit()
'''



'''
for event in pygame.event.get(): # event handling loop

  if event.type == QUIT or (event.type == KEYUP and event.key == K_ESCAPE): #if the escape key was pressed
    pygame.quit()
    sys.exit()
  elif event.type == MOUSEMOTION: #tracks if and where (x,y) position of mouse motion
    mousex, mousey = event.pos
  elif event.type == MOUSEBUTTONUP: #if the mouseClicked is set to True, then it most likely means the button was clicked
    mousex, mousey = event.pos
    mouseClicked = True
''' #this is to try and see the different ways for the user to exit the game

# Define colors here
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
LIGHTBLUE = (153,204,255)
LAVENDER = (232, 212, 246)
PINK = (231,155,214)
INDIGO = (153,153,255)
DEEPBLUE = (0,51,102)
DARKBLUE = (0,0,102)
DARKGREEN = (51,102,0)
LEMONBLUE = (0,102,204)
DEEPGREEN = (0,102,51)
CAMOGREEN = (0,102,0)
LIGHTBROWN = (182,139,64)
TAN = (165,126,59)
CREAM = (236,218,186)
DIRTRED = (159,61,61)
GREY = (224,224,224)
LIGHTYELLOW = (255,255,204)
TEAL = (204,255,255)
SKYBLUE = (204,229,255)
LIGHTORANGE = (255,229,204)
CHOCOLATE = (85,55,24)
DARKBROWN = (74,42,11)

# Define font styles
font = pygame.font.SysFont("Roboto", 48)

# Define graphics here

# Initialize game state
current_screen = 'loading' # pay attention to which screen user is on

# Define functioning buttons



## MAIN PROGRAM LOOP



# Define loading screen 
#loading_screen = pygame.display.set_mode(size)

def slideAnimation(board, direction, message, animationSpeed):

  # Note: This function does not check if the move is valid.
  blankx, blanky = getBlankPosition(board)

  if direction == UP:
    movex = blankx
    movey = blanky + 1
  elif direction == DOWN:  
    movex = blankx
    movey = blanky - 1
  elif direction == LEFT:
    movex = blankx + 1
    movey = blanky
  elif direction == RIGHT:
    movex = blankx - 1
    movey = blanky

  # prepare the base surface

  drawBoard(board, message)

  baseSurf = DISPLAYSURF.copy()

  # draw a blank space over the moving tile on the baseSurf Surface.

  moveLeft, moveTop = getLeftTopOfTile(movex, movey)

  pygame.draw.rect(baseSurf, BGCOLOR, (moveLeft, moveTop, TILESIZE, TILESIZE))

  for i in range(0, TILESIZE, animationSpeed):

    # animate the tile sliding over
    checkForQuit()

    DISPLAYSURF.blit(baseSurf, (0, 0))

    if direction == UP:
      drawTile(movex, movey, board[movex][movey], 0, -i)
    if direction == DOWN:
      drawTile(movex, movey, board[movex][movey], 0, i)
    if direction == LEFT:
      drawTile(movex, movey, board[movex][movey], -i, 0)
    if direction == RIGHT:
      drawTile(movex, movey, board[movex][movey], i, 0)

pygame.display.update()
FPSCLOCK.tick(FPS)

# Call main

# End program
